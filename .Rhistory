library(threejs)
install.packages('threejs')
library(threejs)
x <- sort(rnorm(10))
y <- rnorm(10)
z <- rnorm(10) + atan2(x,y)
scatterplot3js(x, y, z,  color=rainbow(10), renderer="canvas")
install.packages('igraph')
install.packages("igraph")
library(threejs)
x <- sort(rnorm(10))
y <- rnorm(10)
z <- rnorm(10) + atan2(x,y)
scatterplot3js(x, y, z,  color=rainbow(10), renderer="canvas")
install.packages('dev_tools')
install.packages('devtools')
devtools::install_github("yihui/xaringan")
install.packages('caret', dependencies = TRUE)
library(threejs)
x <- sort(rnorm(10))
y <- rnorm(10)
z <- rnorm(10) + atan2(x,y)
scatterplot3js(x, y, z,  color=rainbow(10), renderer="canvas")
library(threejs)
x <- sort(rnorm(10))
y <- rnorm(10)
z <- rnorm(10) + atan2(x,y)
scatterplot3js(x, y, z,  color=rainbow(10), renderer="auto")
install.packages('htmlwidgets')
install.packages("htmlwidgets")
install.packages("shiny")
install.packages('leaflet')
install.packages('DT')
install.packages('kable')
install.packages("kableExtra"
)
install.packages("tictactoe")
devtools::install_github("nproellochs/ReinforcementLearning")
devtools::install_github("ropenscilabs/icon")
install.packages("calibrate")
install.packages("MASS")
install.packages('mass')
install.packages('MASS')
require(e1071)
install.packages('e1071')
install.packages("e1071")
require(rgl)
install.packages("rgl")
set.seed(12345)
seed <- .Random.seed
t <- data.frame(x=runif(100), y=runif(100), z=runif(100), cl=NA)
t$cl <- 2 * t$x + 3 * t$y - 5 * t$z
t$cl <- as.factor(ifelse(t$cl>0,1,-1))
t[1:4,]
svm_model <- svm(cl~x+y+z, t, type='C-classification', kernel='linear',scale=FALSE)
install.packages("kernlab")
library(kernlab)
svm_model <- svm(cl~x+y+z, t, type='C-classification', kernel='linear',scale=FALSE)
library(e1071)
svm_model <- svm(cl~x+y+z, t, type='C-classification', kernel='linear',scale=FALSE)
w <- t(svm_model$coefs) %*% svm_model$SV
detalization <- 100
grid <- expand.grid(seq(from=min(t$x),to=max(t$x),length.out=detalization),
seq(from=min(t$y),to=max(t$y),length.out=detalization))
z <- (svm_model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(t$x[which(t$cl==-1)], t$y[which(t$cl==-1)], t$z[which(t$cl==-1)], col='red')
points3d(t$x[which(t$cl==1)], t$y[which(t$cl==1)], t$z[which(t$cl==1)], col='blue')
library(rgl)
detalization <- 100
grid <- expand.grid(seq(from=min(t$x),to=max(t$x),length.out=detalization),
seq(from=min(t$y),to=max(t$y),length.out=detalization))
z <- (svm_model$rho- w[1,1]*grid[,1] - w[1,2]*grid[,2]) / w[1,3]
plot3d(grid[,1],grid[,2],z)  # this will draw plane.
# adding of points to the graphics.
points3d(t$x[which(t$cl==-1)], t$y[which(t$cl==-1)], t$z[which(t$cl==-1)], col='red')
points3d(t$x[which(t$cl==1)], t$y[which(t$cl==1)], t$z[which(t$cl==1)], col='blue')
install.packages('geozoo')
install.packages('plot3D')
example(surf3D)
M <- mesh(seq(0, 6*pi, length.out = 80),
seq(pi/3, pi, length.out = 80))
u <- M$x ; v <- M$y
x <- u/2 * sin(v) * cos(u)
y <- u/2 * sin(v) * sin(u)
z <- u/2 * cos(v)
surf3D(x, y, z, colvar = z, colkey = FALSE, box = FALSE)
library(plot3D)
M <- mesh(seq(0, 6*pi, length.out = 80),
seq(pi/3, pi, length.out = 80))
u <- M$x ; v <- M$y
x <- u/2 * sin(v) * cos(u)
y <- u/2 * sin(v) * sin(u)
z <- u/2 * cos(v)
surf3D(x, y, z, colvar = z, colkey = FALSE, box = FALSE)
example(surf3D)
M <- mesh(seq(0, 6*pi, length.out = 80),
seq(pi/3, pi, length.out = 80))
u <- M$x ; v <- M$y
z <- sin(u)*cos(v)
surf3D(u, v, z, colvar = z, colkey = FALSE, box = FALSE)
M <- mesh(seq(0, 6*pi, length.out = 80),
seq(pi/3, pi, length.out = 80))
u <- M$x ; v <- M$y
z <- sin(u*v)
surf3D(u, v, z, colvar = z, colkey = FALSE, box = FALSE)
M <- mesh(seq(0, 3, length.out = 80),
seq(0, 3, length.out = 80))
u <- M$x ; v <- M$y
z <- sin(u*v)
surf3D(u, v, z, colvar = z, colkey = FALSE, box = FALSE)
install_github("rgl", "trestletech", "js-class")
install.packages('rglwidget')
install_github("rgl")
install.packages("devtools")
library("devtools")
install_github("rgl")
install.packages('DiagrammeR')
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('yaml')
update.packages(ask = FALSE, checkBuilt = TRUE)
installr::updateR()
install.packages('installr')
installr::updateR()
install.packages(c("caret", "curl", "foreach", "iterators", "proxy", "reshape2", "testthat", "yaml"))
stallr::installr()
installr::installr()
install.packages('rmarkdown')
install.packages("rmarkdown")
installr::installr()
installr::installr()
install.packages('tikzDevice')
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages('yaml')
install.packages("yaml")
install.packages('plotly')
library(MASS)
# from the fitdistr example
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fit <- fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
loglik <- function(shape, rate) sum(dgamma(x, shape=shape, rate=rate,
log=TRUE))
loglik <- Vectorize(loglik)
xlim <- fit$estimate[1]+4*fit$sd[1]*c(-1,1)
ylim <- fit$estimate[2]+4*fit$sd[2]*c(-1,1)
mfrow3d(1, 2, sharedMouse = TRUE)
persp3d(loglik,
xlim = xlim, ylim = ylim,
n = 30)
zlim <- fit$loglik + c(-qchisq(0.99, 2)/2, 0)
next3d()
persp3d(loglik,
xlim = xlim, ylim = ylim, zlim = zlim,
n = 30)
install.packages('rgl')
library(MASS)
# from the fitdistr example
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fit <- fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
loglik <- function(shape, rate) sum(dgamma(x, shape=shape, rate=rate,
log=TRUE))
loglik <- Vectorize(loglik)
xlim <- fit$estimate[1]+4*fit$sd[1]*c(-1,1)
ylim <- fit$estimate[2]+4*fit$sd[2]*c(-1,1)
mfrow3d(1, 2, sharedMouse = TRUE)
persp3d(loglik,
xlim = xlim, ylim = ylim,
n = 30)
zlim <- fit$loglik + c(-qchisq(0.99, 2)/2, 0)
next3d()
persp3d(loglik,
xlim = xlim, ylim = ylim, zlim = zlim,
n = 30)
install.packages("scatterplot3d")
install.packages("plot3d")
install.packages("plot3D")
library(MASS)
# from the fitdistr example
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fit <- fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
loglik <- function(shape, rate) sum(dgamma(x, shape=shape, rate=rate,
log=TRUE))
loglik <- Vectorize(loglik)
xlim <- fit$estimate[1]+4*fit$sd[1]*c(-1,1)
ylim <- fit$estimate[2]+4*fit$sd[2]*c(-1,1)
mfrow3d(1, 2, sharedMouse = TRUE)
persp3d(loglik,
xlim = xlim, ylim = ylim,
n = 30)
zlim <- fit$loglik + c(-qchisq(0.99, 2)/2, 0)
next3d()
persp3d(loglik,
xlim = xlim, ylim = ylim, zlim = zlim,
n = 30)
nbebes=rnorm(20, mean=75, sd=2.5)
mu.seq <- seq(60,100,length=500)
sigma.seq <- seq(1,20,length=500)
f <- Vectorize(vero,vectorize.args=c("mu","sigma"))
z <- outer(mu.seq,sigma.seq,f,datos=nbebes)
z2 <- z/max(z)
colors <- rev(rainbow(20))
breaks <- seq(zlim[1], zlim[2], length.out=(length(colors)+1))
CUT <- cut(z2, breaks=breaks, include.lowest = TRUE)
colorlevels <- colors[match(CUT, levels(CUT))] # assign colors to heights for each point
persp3d(mu.seq,sigma.seq,z2,color=colorlevels)
shade3d(oh3d(col=cols[7]))
layout3d(matrix(1:16, 4,4), heights=c(1,3,1,3))
persp3d(loglik,
xlim = xlim, ylim = ylim, zlim = zlim,
n = 30)
persp3d(loglik, xlim = xlim, ylim = ylim, zlim = zlim,n = 30)
install.packages('persp3d')
library(lattice)
library(MASS)
library(lattice)
# from the fitdistr example
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fit <- fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
loglik <- function(shape, rate) sum(dgamma(x, shape=shape, rate=rate,
log=TRUE))
loglik <- Vectorize(loglik)
xlim <- fit$estimate[1]+4*fit$sd[1]*c(-1,1)
ylim <- fit$estimate[2]+4*fit$sd[2]*c(-1,1)
mfrow3d(1, 2, sharedMouse = TRUE)
persp3d(loglik,
xlim = xlim, ylim = ylim,
n = 30)
zlim <- fit$loglik + c(-qchisq(0.99, 2)/2, 0)
next3d()
persp3d(loglik, xlim = xlim, ylim = ylim, zlim = zlim,n = 30)
library(MASS)
library(rgl)
# from the fitdistr example
set.seed(123)
x <- rgamma(100, shape = 5, rate = 0.1)
fit <- fitdistr(x, dgamma, list(shape = 1, rate = 0.1), lower = 0.001)
loglik <- function(shape, rate) sum(dgamma(x, shape=shape, rate=rate,
log=TRUE))
loglik <- Vectorize(loglik)
xlim <- fit$estimate[1]+4*fit$sd[1]*c(-1,1)
ylim <- fit$estimate[2]+4*fit$sd[2]*c(-1,1)
mfrow3d(1, 2, sharedMouse = TRUE)
persp3d(loglik,
xlim = xlim, ylim = ylim,
n = 30)
zlim <- fit$loglik + c(-qchisq(0.99, 2)/2, 0)
next3d()
persp3d(loglik, xlim = xlim, ylim = ylim, zlim = zlim,n = 30)
install.packages('sna')
install.packages('animation')
install.packages('blogdown')
setwd("d:/GitHub/blogdown")
blogdown:::serve_site()
blogdown:::serve_site()
